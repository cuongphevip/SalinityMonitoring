#!/usr/bin/env node

/**
 * Module dependencies.
 */
var debug = require('debug')('server:SalinityMonitoring');
var http = require('http');

var server, port, io, callback;

var initConnection = require('../database/db_connection').initConnection;

initConnection(function () {
	var app = require('../app');
	/**
	 * Get port from environment and store in Express.
	 */
	port = normalizePort(process.env.PORT || '80');
	app.set('port', port);

	/**
	 * Create HTTP server.
	 */

	server = http.createServer(app);
  io = require('socket.io')(server);
  io.on('connection', function(socket){
    console.log('a user connected');
    socket.on('disconnect', function(){
      console.log('user disconnected');
    }
  );
  if (typeof callback == 'function'){
    callback(io);
  }
});
	/**
	 * Listen on provided port, on all network interfaces.
	 */

	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		 ? 'Pipe ' + port
		 : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		 ? 'pipe ' + addr
		 : 'port ' + addr.port;
	debug('Listening on ' + bind);
}

module.exports = function(cb){
    if(typeof io != 'undefined'){
        cb(io);
    } else {
        callback = cb;
    }
}